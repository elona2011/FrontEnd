参数变更影响函数外部
如果函数内部对于参数整体赋值修改，那么都不会影响外部，无论参数是数组，对象。
但如果该参数有元素(数组)或属性(对象)，函数内直接对元素或属性赋值，那么将影响到函数外部。
实际上，该问题和对象的引用有关。当复制对象时，操作的是对象的引用。但为对象添加修改属性时，操作的是对象本身。

arguments.callee指向当前函数(将被废弃)
arguments.callee.caller指向调用当前函数的函数

(function b(){})();
b();    //抛出一个referenceError,b函数只能在函数表达式内部访问

for(var i=1;i<5;i++){
 setTimeout(function timer(){
  console.log(i);
 },i*1000);
} //输出4个5
for(let i=1;i<5;i++){
 setTimeout(function timer(){
  console.log(i);
 },i*1000);
} //输出1，2，3，4

对象的属性名都是字符串，如果不是，也会先转化成字符串，如下：
var myObject={};
myObjcet[true] = "foo";
myObject[3] = "bar";
myObject[myObject] = "baz";
myObject['true"]; //"foo"
myObject["3"]; //"bar"
myObject["[object Object]"]; //"baz"

get和set
var my={
get a(){return this._a_;},
set a(val){this._a_=val*2;}
};
my.a=2;
my.a; //4
 
所有的普通对象都可以通过对于Object.prototype的委托来访问hasOwnProperty()，但有的对象可能没连接到Object.prototype（通过Object.create(null)来创建），这时访问myObject.hasOwnProperty()会失败。但可以使用Object.prototype.hasOwnProperty.call(myObject, "a")

可枚举相当于“出现在对象属性的遍历中”，即for(var k in myObject){...}遍历可枚举属性
for...in可遍历对象的可枚举属性列表，包括[[prototype]]链
("b" in myObject); //查找[[Prototype]]链
myObject.hasOwnProperty("b"); //只查找对象直接包含的属性
Object.keys(myObject); //返回一个数组，包含所有可枚举属性，不查[[Prototype]]链
Object.getOwnPropertyName(myObject); //返回一个数组，包含所有属性，不查[[Prototype]]链

class
与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）
class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  toString() {
    return '('+this.x+', '+this.y+')';
  }
}


